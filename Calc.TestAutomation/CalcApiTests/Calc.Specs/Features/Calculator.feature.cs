// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.8.0.0
//      SpecFlow Generator Version:3.8.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Calc.Specs.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.8.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Calculator")]
    public partial class CalculatorFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "Calculator.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Calculator", "Simple calculator for adding **two** numbers", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Adding 2 positive integers")]
        [NUnit.Framework.CategoryAttribute("add-api")]
        public virtual void Adding2PositiveIntegers()
        {
            string[] tagsOfScenario = new string[] {
                    "add-api"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Adding 2 positive integers", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Number1"});
                table1.AddRow(new string[] {
                            "1"});
                table1.AddRow(new string[] {
                            "3"});
                table1.AddRow(new string[] {
                            "5"});
                table1.AddRow(new string[] {
                            "7"});
                table1.AddRow(new string[] {
                            "1"});
                table1.AddRow(new string[] {
                            "34"});
                table1.AddRow(new string[] {
                            "99"});
                table1.AddRow(new string[] {
                            "1"});
                table1.AddRow(new string[] {
                            "999"});
#line 7
 testRunner.Given("I have the first number", ((string)(null)), table1, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Number2"});
                table2.AddRow(new string[] {
                            "2"});
                table2.AddRow(new string[] {
                            "4"});
                table2.AddRow(new string[] {
                            "6"});
                table2.AddRow(new string[] {
                            "8"});
                table2.AddRow(new string[] {
                            "9"});
                table2.AddRow(new string[] {
                            "58"});
                table2.AddRow(new string[] {
                            "1"});
                table2.AddRow(new string[] {
                            "999"});
                table2.AddRow(new string[] {
                            "999"});
#line 20
 testRunner.And("the second number", ((string)(null)), table2, "And ");
#line hidden
#line 32
 testRunner.When("both numbers are added", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Result"});
                table3.AddRow(new string[] {
                            "3"});
                table3.AddRow(new string[] {
                            "7"});
                table3.AddRow(new string[] {
                            "11"});
                table3.AddRow(new string[] {
                            "15"});
                table3.AddRow(new string[] {
                            "10"});
                table3.AddRow(new string[] {
                            "92"});
                table3.AddRow(new string[] {
                            "100"});
                table3.AddRow(new string[] {
                            "1000"});
                table3.AddRow(new string[] {
                            "1998"});
#line 33
 testRunner.Then("the answer should be the following", ((string)(null)), table3, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Adding 2 negative integers")]
        [NUnit.Framework.CategoryAttribute("add-api")]
        public virtual void Adding2NegativeIntegers()
        {
            string[] tagsOfScenario = new string[] {
                    "add-api"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Adding 2 negative integers", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 48
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Number1"});
                table4.AddRow(new string[] {
                            "-1"});
                table4.AddRow(new string[] {
                            "-3"});
                table4.AddRow(new string[] {
                            "-5"});
                table4.AddRow(new string[] {
                            "-7"});
                table4.AddRow(new string[] {
                            "-1"});
                table4.AddRow(new string[] {
                            "-34"});
                table4.AddRow(new string[] {
                            "-99"});
                table4.AddRow(new string[] {
                            "-1"});
                table4.AddRow(new string[] {
                            "-999"});
#line 49
 testRunner.Given("I have the first number", ((string)(null)), table4, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Number2"});
                table5.AddRow(new string[] {
                            "-2"});
                table5.AddRow(new string[] {
                            "-4"});
                table5.AddRow(new string[] {
                            "-6"});
                table5.AddRow(new string[] {
                            "-8"});
                table5.AddRow(new string[] {
                            "-9"});
                table5.AddRow(new string[] {
                            "-58"});
                table5.AddRow(new string[] {
                            "-1"});
                table5.AddRow(new string[] {
                            "-999"});
                table5.AddRow(new string[] {
                            "-999"});
#line 62
 testRunner.And("the second number", ((string)(null)), table5, "And ");
#line hidden
#line 75
 testRunner.When("both numbers are added", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "Result"});
                table6.AddRow(new string[] {
                            "-3"});
                table6.AddRow(new string[] {
                            "-7"});
                table6.AddRow(new string[] {
                            "-11"});
                table6.AddRow(new string[] {
                            "-15"});
                table6.AddRow(new string[] {
                            "-10"});
                table6.AddRow(new string[] {
                            "-92"});
                table6.AddRow(new string[] {
                            "-100"});
                table6.AddRow(new string[] {
                            "-1000"});
                table6.AddRow(new string[] {
                            "-1998"});
#line 76
 testRunner.Then("the answer should be the following", ((string)(null)), table6, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Adding 1 positive and 1 negative integer")]
        [NUnit.Framework.CategoryAttribute("add-api")]
        public virtual void Adding1PositiveAnd1NegativeInteger()
        {
            string[] tagsOfScenario = new string[] {
                    "add-api"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Adding 1 positive and 1 negative integer", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 90
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "Number1"});
                table7.AddRow(new string[] {
                            "1"});
                table7.AddRow(new string[] {
                            "-3"});
                table7.AddRow(new string[] {
                            "5"});
                table7.AddRow(new string[] {
                            "-7"});
                table7.AddRow(new string[] {
                            "1"});
                table7.AddRow(new string[] {
                            "-34"});
                table7.AddRow(new string[] {
                            "99"});
                table7.AddRow(new string[] {
                            "-1"});
                table7.AddRow(new string[] {
                            "999"});
#line 91
 testRunner.Given("I have the first number", ((string)(null)), table7, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "Number2"});
                table8.AddRow(new string[] {
                            "-2"});
                table8.AddRow(new string[] {
                            "4"});
                table8.AddRow(new string[] {
                            "-6"});
                table8.AddRow(new string[] {
                            "8"});
                table8.AddRow(new string[] {
                            "-9"});
                table8.AddRow(new string[] {
                            "58"});
                table8.AddRow(new string[] {
                            "-1"});
                table8.AddRow(new string[] {
                            "999"});
                table8.AddRow(new string[] {
                            "-999"});
#line 104
 testRunner.And("the second number", ((string)(null)), table8, "And ");
#line hidden
#line 117
 testRunner.When("both numbers are added", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "Result"});
                table9.AddRow(new string[] {
                            "-1"});
                table9.AddRow(new string[] {
                            "1"});
                table9.AddRow(new string[] {
                            "-1"});
                table9.AddRow(new string[] {
                            "1"});
                table9.AddRow(new string[] {
                            "-8"});
                table9.AddRow(new string[] {
                            "24"});
                table9.AddRow(new string[] {
                            "98"});
                table9.AddRow(new string[] {
                            "998"});
                table9.AddRow(new string[] {
                            "0"});
#line 118
 testRunner.Then("the answer should be the following", ((string)(null)), table9, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Adding 0 and an integer")]
        [NUnit.Framework.CategoryAttribute("add-api")]
        public virtual void Adding0AndAnInteger()
        {
            string[] tagsOfScenario = new string[] {
                    "add-api"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Adding 0 and an integer", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 132
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "Number1"});
                table10.AddRow(new string[] {
                            "-1"});
                table10.AddRow(new string[] {
                            "0"});
                table10.AddRow(new string[] {
                            "3"});
                table10.AddRow(new string[] {
                            "0"});
                table10.AddRow(new string[] {
                            "5"});
                table10.AddRow(new string[] {
                            "0"});
                table10.AddRow(new string[] {
                            "7"});
                table10.AddRow(new string[] {
                            "0"});
                table10.AddRow(new string[] {
                            "9"});
                table10.AddRow(new string[] {
                            "0"});
                table10.AddRow(new string[] {
                            "-999"});
#line 133
 testRunner.Given("I have the first number", ((string)(null)), table10, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "Number2"});
                table11.AddRow(new string[] {
                            "0"});
                table11.AddRow(new string[] {
                            "2"});
                table11.AddRow(new string[] {
                            "0"});
                table11.AddRow(new string[] {
                            "-4"});
                table11.AddRow(new string[] {
                            "0"});
                table11.AddRow(new string[] {
                            "6"});
                table11.AddRow(new string[] {
                            "0"});
                table11.AddRow(new string[] {
                            "8"});
                table11.AddRow(new string[] {
                            "0"});
                table11.AddRow(new string[] {
                            "100"});
                table11.AddRow(new string[] {
                            "0"});
#line 146
 testRunner.And("the second number", ((string)(null)), table11, "And ");
#line hidden
#line 159
 testRunner.When("both numbers are added", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "Result"});
                table12.AddRow(new string[] {
                            "-1"});
                table12.AddRow(new string[] {
                            "2"});
                table12.AddRow(new string[] {
                            "3"});
                table12.AddRow(new string[] {
                            "-4"});
                table12.AddRow(new string[] {
                            "5"});
                table12.AddRow(new string[] {
                            "6"});
                table12.AddRow(new string[] {
                            "7"});
                table12.AddRow(new string[] {
                            "8"});
                table12.AddRow(new string[] {
                            "9"});
                table12.AddRow(new string[] {
                            "100"});
                table12.AddRow(new string[] {
                            "-999"});
#line 160
 testRunner.Then("the answer should be the following", ((string)(null)), table12, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Adding 2 positive decimals")]
        [NUnit.Framework.CategoryAttribute("add-api")]
        public virtual void Adding2PositiveDecimals()
        {
            string[] tagsOfScenario = new string[] {
                    "add-api"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Adding 2 positive decimals", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 175
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                            "Number1"});
                table13.AddRow(new string[] {
                            "1.5"});
#line 176
 testRunner.Given("I have the first number", ((string)(null)), table13, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                            "Number2"});
                table14.AddRow(new string[] {
                            "3.6"});
#line 180
 testRunner.And("the second number", ((string)(null)), table14, "And ");
#line hidden
#line 184
 testRunner.When("both numbers are added", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                            "Result"});
                table15.AddRow(new string[] {
                            "5.1"});
#line 185
 testRunner.Then("the answer should be the following", ((string)(null)), table15, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Adding 2 negative decimals")]
        [NUnit.Framework.CategoryAttribute("add-api")]
        public virtual void Adding2NegativeDecimals()
        {
            string[] tagsOfScenario = new string[] {
                    "add-api"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Adding 2 negative decimals", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 190
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                            "Number1"});
                table16.AddRow(new string[] {
                            "-0.7"});
#line 191
 testRunner.Given("I have the first number", ((string)(null)), table16, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                            "Number2"});
                table17.AddRow(new string[] {
                            "-2.8"});
#line 196
 testRunner.And("the second number", ((string)(null)), table17, "And ");
#line hidden
#line 200
 testRunner.When("both numbers are added", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                            "Result"});
                table18.AddRow(new string[] {
                            "-3.5"});
#line 201
 testRunner.Then("the answer should be the following", ((string)(null)), table18, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Adding 1 postive and 1 negative decimal")]
        [NUnit.Framework.CategoryAttribute("add-api")]
        public virtual void Adding1PostiveAnd1NegativeDecimal()
        {
            string[] tagsOfScenario = new string[] {
                    "add-api"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Adding 1 postive and 1 negative decimal", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 206
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                            "Number1"});
                table19.AddRow(new string[] {
                            "-9.5"});
#line 207
 testRunner.Given("I have the first number", ((string)(null)), table19, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                            "Number2"});
                table20.AddRow(new string[] {
                            "3.2"});
#line 212
 testRunner.And("the second number", ((string)(null)), table20, "And ");
#line hidden
#line 216
 testRunner.When("both numbers are added", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                            "Result"});
                table21.AddRow(new string[] {
                            "-6.3"});
#line 217
 testRunner.Then("the answer should be the following", ((string)(null)), table21, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Adding 2 large integers")]
        [NUnit.Framework.CategoryAttribute("add-api")]
        public virtual void Adding2LargeIntegers()
        {
            string[] tagsOfScenario = new string[] {
                    "add-api"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Adding 2 large integers", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 223
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                            "Number1"});
                table22.AddRow(new string[] {
                            "165168746"});
                table22.AddRow(new string[] {
                            "-165168746"});
                table22.AddRow(new string[] {
                            "-8643684"});
#line 224
 testRunner.Given("I have the first number", ((string)(null)), table22, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                            "Number2"});
                table23.AddRow(new string[] {
                            "165466894"});
                table23.AddRow(new string[] {
                            "-165466894"});
                table23.AddRow(new string[] {
                            "789648353"});
#line 231
 testRunner.And("the second number", ((string)(null)), table23, "And ");
#line hidden
#line 237
 testRunner.When("both numbers are added", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                            "Result"});
                table24.AddRow(new string[] {
                            "330635640"});
                table24.AddRow(new string[] {
                            "-330635640"});
                table24.AddRow(new string[] {
                            "781004669"});
#line 238
 testRunner.Then("the answer should be the following", ((string)(null)), table24, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Adding 2 small decimals")]
        [NUnit.Framework.CategoryAttribute("add-api")]
        public virtual void Adding2SmallDecimals()
        {
            string[] tagsOfScenario = new string[] {
                    "add-api"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Adding 2 small decimals", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 246
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                            "Number1"});
                table25.AddRow(new string[] {
                            "0.000006"});
#line 247
 testRunner.Given("I have the first number", ((string)(null)), table25, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                            "Number2"});
                table26.AddRow(new string[] {
                            "0.0023"});
#line 251
 testRunner.And("the second number", ((string)(null)), table26, "And ");
#line hidden
#line 255
 testRunner.When("both numbers are added", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                            "Result"});
                table27.AddRow(new string[] {
                            "0.002306"});
#line 256
 testRunner.Then("the answer should be the following", ((string)(null)), table27, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Subtracting 2 positive integers")]
        [NUnit.Framework.CategoryAttribute("subtract-api")]
        public virtual void Subtracting2PositiveIntegers()
        {
            string[] tagsOfScenario = new string[] {
                    "subtract-api"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Subtracting 2 positive integers", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 262
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                            "Number1"});
                table28.AddRow(new string[] {
                            "1"});
                table28.AddRow(new string[] {
                            "3"});
                table28.AddRow(new string[] {
                            "6"});
                table28.AddRow(new string[] {
                            "8"});
                table28.AddRow(new string[] {
                            "1"});
                table28.AddRow(new string[] {
                            "34"});
                table28.AddRow(new string[] {
                            "99"});
                table28.AddRow(new string[] {
                            "1"});
#line 263
 testRunner.Given("I have the first number", ((string)(null)), table28, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                            "Number2"});
                table29.AddRow(new string[] {
                            "2"});
                table29.AddRow(new string[] {
                            "4"});
                table29.AddRow(new string[] {
                            "5"});
                table29.AddRow(new string[] {
                            "7"});
                table29.AddRow(new string[] {
                            "9"});
                table29.AddRow(new string[] {
                            "58"});
                table29.AddRow(new string[] {
                            "1"});
                table29.AddRow(new string[] {
                            "999"});
#line 273
 testRunner.And("the second number", ((string)(null)), table29, "And ");
#line hidden
#line 283
 testRunner.When("both numbers are subtracted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                            "Result"});
                table30.AddRow(new string[] {
                            "-1"});
                table30.AddRow(new string[] {
                            "-1"});
                table30.AddRow(new string[] {
                            "1"});
                table30.AddRow(new string[] {
                            "1"});
                table30.AddRow(new string[] {
                            "-8"});
                table30.AddRow(new string[] {
                            "-24"});
                table30.AddRow(new string[] {
                            "98"});
                table30.AddRow(new string[] {
                            "-998"});
#line 284
 testRunner.Then("the answer should be the following", ((string)(null)), table30, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Subtracting 2 negative integers")]
        [NUnit.Framework.CategoryAttribute("subtract-api")]
        public virtual void Subtracting2NegativeIntegers()
        {
            string[] tagsOfScenario = new string[] {
                    "subtract-api"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Subtracting 2 negative integers", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 297
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                            "Number1"});
                table31.AddRow(new string[] {
                            "-99"});
                table31.AddRow(new string[] {
                            "-0"});
                table31.AddRow(new string[] {
                            "-1"});
                table31.AddRow(new string[] {
                            "-3"});
                table31.AddRow(new string[] {
                            "-5"});
                table31.AddRow(new string[] {
                            "-8"});
                table31.AddRow(new string[] {
                            "-9"});
                table31.AddRow(new string[] {
                            "-34"});
                table31.AddRow(new string[] {
                            "-99"});
                table31.AddRow(new string[] {
                            "-1"});
#line 298
 testRunner.Given("I have the first number", ((string)(null)), table31, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                            "Number2"});
                table32.AddRow(new string[] {
                            "-99"});
                table32.AddRow(new string[] {
                            "-0"});
                table32.AddRow(new string[] {
                            "-2"});
                table32.AddRow(new string[] {
                            "-4"});
                table32.AddRow(new string[] {
                            "-6"});
                table32.AddRow(new string[] {
                            "-7"});
                table32.AddRow(new string[] {
                            "-1"});
                table32.AddRow(new string[] {
                            "-58"});
                table32.AddRow(new string[] {
                            "-1"});
                table32.AddRow(new string[] {
                            "-99"});
#line 310
 testRunner.And("the second number", ((string)(null)), table32, "And ");
#line hidden
#line 322
 testRunner.When("both numbers are subtracted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                            "Result"});
                table33.AddRow(new string[] {
                            "0"});
                table33.AddRow(new string[] {
                            "0"});
                table33.AddRow(new string[] {
                            "1"});
                table33.AddRow(new string[] {
                            "1"});
                table33.AddRow(new string[] {
                            "1"});
                table33.AddRow(new string[] {
                            "-1"});
                table33.AddRow(new string[] {
                            "-8"});
                table33.AddRow(new string[] {
                            "24"});
                table33.AddRow(new string[] {
                            "-98"});
                table33.AddRow(new string[] {
                            "98"});
#line 323
 testRunner.Then("the answer should be the following", ((string)(null)), table33, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Subtracting 1 positive and 1 negative integer")]
        [NUnit.Framework.CategoryAttribute("subtract-api")]
        public virtual void Subtracting1PositiveAnd1NegativeInteger()
        {
            string[] tagsOfScenario = new string[] {
                    "subtract-api"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Subtracting 1 positive and 1 negative integer", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 337
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                            "Number1"});
                table34.AddRow(new string[] {
                            "1"});
                table34.AddRow(new string[] {
                            "-3"});
                table34.AddRow(new string[] {
                            "5"});
                table34.AddRow(new string[] {
                            "-7"});
                table34.AddRow(new string[] {
                            "9"});
                table34.AddRow(new string[] {
                            "-34"});
                table34.AddRow(new string[] {
                            "99"});
                table34.AddRow(new string[] {
                            "-1"});
                table34.AddRow(new string[] {
                            "-99"});
#line 338
 testRunner.Given("I have the first number", ((string)(null)), table34, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                            "Number2"});
                table35.AddRow(new string[] {
                            "-2"});
                table35.AddRow(new string[] {
                            "4"});
                table35.AddRow(new string[] {
                            "-6"});
                table35.AddRow(new string[] {
                            "8"});
                table35.AddRow(new string[] {
                            "-1"});
                table35.AddRow(new string[] {
                            "58"});
                table35.AddRow(new string[] {
                            "-1"});
                table35.AddRow(new string[] {
                            "999"});
                table35.AddRow(new string[] {
                            "99"});
#line 350
 testRunner.And("the second number", ((string)(null)), table35, "And ");
#line hidden
#line 362
 testRunner.When("both numbers are subtracted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                            "Result"});
                table36.AddRow(new string[] {
                            "3"});
                table36.AddRow(new string[] {
                            "-7"});
                table36.AddRow(new string[] {
                            "11"});
                table36.AddRow(new string[] {
                            "-15"});
                table36.AddRow(new string[] {
                            "10"});
                table36.AddRow(new string[] {
                            "-92"});
                table36.AddRow(new string[] {
                            "100"});
                table36.AddRow(new string[] {
                            "-1000"});
                table36.AddRow(new string[] {
                            "-198"});
#line 363
 testRunner.Then("the answer should be the following", ((string)(null)), table36, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Subtracting 0 and an integer")]
        [NUnit.Framework.CategoryAttribute("subtract-api")]
        public virtual void Subtracting0AndAnInteger()
        {
            string[] tagsOfScenario = new string[] {
                    "subtract-api"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Subtracting 0 and an integer", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 376
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                            "Number1"});
                table37.AddRow(new string[] {
                            "-1"});
                table37.AddRow(new string[] {
                            "0"});
                table37.AddRow(new string[] {
                            "3"});
                table37.AddRow(new string[] {
                            "0"});
                table37.AddRow(new string[] {
                            "5"});
                table37.AddRow(new string[] {
                            "0"});
                table37.AddRow(new string[] {
                            "7"});
                table37.AddRow(new string[] {
                            "0"});
                table37.AddRow(new string[] {
                            "9"});
                table37.AddRow(new string[] {
                            "0"});
                table37.AddRow(new string[] {
                            "-999"});
                table37.AddRow(new string[] {
                            "0"});
#line 377
 testRunner.Given("I have the first number", ((string)(null)), table37, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                            "Number2"});
                table38.AddRow(new string[] {
                            "0"});
                table38.AddRow(new string[] {
                            "2"});
                table38.AddRow(new string[] {
                            "0"});
                table38.AddRow(new string[] {
                            "-4"});
                table38.AddRow(new string[] {
                            "0"});
                table38.AddRow(new string[] {
                            "6"});
                table38.AddRow(new string[] {
                            "0"});
                table38.AddRow(new string[] {
                            "8"});
                table38.AddRow(new string[] {
                            "0"});
                table38.AddRow(new string[] {
                            "100"});
                table38.AddRow(new string[] {
                            "0"});
                table38.AddRow(new string[] {
                            "-0"});
#line 391
 testRunner.And("the second number", ((string)(null)), table38, "And ");
#line hidden
#line 405
 testRunner.When("both numbers are subtracted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table39 = new TechTalk.SpecFlow.Table(new string[] {
                            "Result"});
                table39.AddRow(new string[] {
                            "-1"});
                table39.AddRow(new string[] {
                            "-2"});
                table39.AddRow(new string[] {
                            "3"});
                table39.AddRow(new string[] {
                            "4"});
                table39.AddRow(new string[] {
                            "5"});
                table39.AddRow(new string[] {
                            "-6"});
                table39.AddRow(new string[] {
                            "7"});
                table39.AddRow(new string[] {
                            "-8"});
                table39.AddRow(new string[] {
                            "9"});
                table39.AddRow(new string[] {
                            "-100"});
                table39.AddRow(new string[] {
                            "-999"});
                table39.AddRow(new string[] {
                            "0"});
#line 406
 testRunner.Then("the answer should be the following", ((string)(null)), table39, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Subtracting 2 positive decimals")]
        [NUnit.Framework.CategoryAttribute("add-api")]
        public virtual void Subtracting2PositiveDecimals()
        {
            string[] tagsOfScenario = new string[] {
                    "add-api"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Subtracting 2 positive decimals", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 422
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table40 = new TechTalk.SpecFlow.Table(new string[] {
                            "Number1"});
                table40.AddRow(new string[] {
                            "4.6"});
#line 423
 testRunner.Given("I have the first number", ((string)(null)), table40, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table41 = new TechTalk.SpecFlow.Table(new string[] {
                            "Number2"});
                table41.AddRow(new string[] {
                            "8.2"});
#line 427
 testRunner.And("the second number", ((string)(null)), table41, "And ");
#line hidden
#line 431
 testRunner.When("both numbers are added", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table42 = new TechTalk.SpecFlow.Table(new string[] {
                            "Result"});
                table42.AddRow(new string[] {
                            "-3.6"});
#line 432
 testRunner.Then("the answer should be the following", ((string)(null)), table42, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Subtracting 2 negative decimals")]
        [NUnit.Framework.CategoryAttribute("subtract-api")]
        public virtual void Subtracting2NegativeDecimals()
        {
            string[] tagsOfScenario = new string[] {
                    "subtract-api"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Subtracting 2 negative decimals", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 438
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table43 = new TechTalk.SpecFlow.Table(new string[] {
                            "Number1"});
                table43.AddRow(new string[] {
                            "-1.2"});
#line 439
 testRunner.Given("I have the first number", ((string)(null)), table43, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table44 = new TechTalk.SpecFlow.Table(new string[] {
                            "Number2"});
                table44.AddRow(new string[] {
                            "-8.5"});
#line 443
 testRunner.And("the second number", ((string)(null)), table44, "And ");
#line hidden
#line 447
 testRunner.When("both numbers are added", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table45 = new TechTalk.SpecFlow.Table(new string[] {
                            "Result"});
                table45.AddRow(new string[] {
                            "-9.7"});
#line 448
 testRunner.Then("the answer should be the following", ((string)(null)), table45, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Subtracting 1 postive and 1 negative decimal")]
        [NUnit.Framework.CategoryAttribute("subtract-api")]
        public virtual void Subtracting1PostiveAnd1NegativeDecimal()
        {
            string[] tagsOfScenario = new string[] {
                    "subtract-api"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Subtracting 1 postive and 1 negative decimal", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 453
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table46 = new TechTalk.SpecFlow.Table(new string[] {
                            "Number1"});
                table46.AddRow(new string[] {
                            "8.1"});
#line 454
 testRunner.Given("I have the first number", ((string)(null)), table46, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table47 = new TechTalk.SpecFlow.Table(new string[] {
                            "Number2"});
                table47.AddRow(new string[] {
                            "-4.6"});
#line 459
 testRunner.And("the second number", ((string)(null)), table47, "And ");
#line hidden
#line 463
 testRunner.When("both numbers are added", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table48 = new TechTalk.SpecFlow.Table(new string[] {
                            "Result"});
                table48.AddRow(new string[] {
                            "12.7"});
#line 464
 testRunner.Then("the answer should be the following", ((string)(null)), table48, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Subtracting 2 small decimals")]
        [NUnit.Framework.CategoryAttribute("subtract-api")]
        public virtual void Subtracting2SmallDecimals()
        {
            string[] tagsOfScenario = new string[] {
                    "subtract-api"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Subtracting 2 small decimals", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 470
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table49 = new TechTalk.SpecFlow.Table(new string[] {
                            "Number1"});
                table49.AddRow(new string[] {
                            "0.0008"});
#line 471
 testRunner.Given("I have the first number", ((string)(null)), table49, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table50 = new TechTalk.SpecFlow.Table(new string[] {
                            "Number2"});
                table50.AddRow(new string[] {
                            "0.002"});
#line 475
 testRunner.And("the second number", ((string)(null)), table50, "And ");
#line hidden
#line 479
 testRunner.When("both numbers are added", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table51 = new TechTalk.SpecFlow.Table(new string[] {
                            "Result"});
                table51.AddRow(new string[] {
                            "-0.0012"});
#line 480
 testRunner.Then("the answer should be the following", ((string)(null)), table51, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Subtracting 2 large integers")]
        [NUnit.Framework.CategoryAttribute("subtract-api")]
        public virtual void Subtracting2LargeIntegers()
        {
            string[] tagsOfScenario = new string[] {
                    "subtract-api"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Subtracting 2 large integers", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 486
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table52 = new TechTalk.SpecFlow.Table(new string[] {
                            "Number1"});
                table52.AddRow(new string[] {
                            "-8643684"});
                table52.AddRow(new string[] {
                            "8643684"});
                table52.AddRow(new string[] {
                            "165466894"});
#line 487
 testRunner.Given("I have the first number", ((string)(null)), table52, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table53 = new TechTalk.SpecFlow.Table(new string[] {
                            "Number2"});
                table53.AddRow(new string[] {
                            "-789648353"});
                table53.AddRow(new string[] {
                            "-789648353"});
                table53.AddRow(new string[] {
                            "330635640"});
#line 493
 testRunner.And("the second number", ((string)(null)), table53, "And ");
#line hidden
#line 499
 testRunner.When("both numbers are subtracted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table54 = new TechTalk.SpecFlow.Table(new string[] {
                            "Result"});
                table54.AddRow(new string[] {
                            "781004669"});
                table54.AddRow(new string[] {
                            "798292037"});
                table54.AddRow(new string[] {
                            "-165168746"});
#line 500
 testRunner.Then("the answer should be the following", ((string)(null)), table54, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Multiplying 2 positive Integers")]
        [NUnit.Framework.CategoryAttribute("multiply-api")]
        public virtual void Multiplying2PositiveIntegers()
        {
            string[] tagsOfScenario = new string[] {
                    "multiply-api"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Multiplying 2 positive Integers", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 510
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table55 = new TechTalk.SpecFlow.Table(new string[] {
                            "Number1"});
                table55.AddRow(new string[] {
                            "0"});
                table55.AddRow(new string[] {
                            "1"});
                table55.AddRow(new string[] {
                            "2"});
                table55.AddRow(new string[] {
                            "3"});
                table55.AddRow(new string[] {
                            "6"});
                table55.AddRow(new string[] {
                            "8"});
                table55.AddRow(new string[] {
                            "1"});
                table55.AddRow(new string[] {
                            "1"});
                table55.AddRow(new string[] {
                            "99"});
                table55.AddRow(new string[] {
                            "34"});
                table55.AddRow(new string[] {
                            "99"});
                table55.AddRow(new string[] {
                            "999"});
                table55.AddRow(new string[] {
                            "998"});
#line 511
 testRunner.Given("I have the first number", ((string)(null)), table55, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table56 = new TechTalk.SpecFlow.Table(new string[] {
                            "Number2"});
                table56.AddRow(new string[] {
                            "0"});
                table56.AddRow(new string[] {
                            "2"});
                table56.AddRow(new string[] {
                            "1"});
                table56.AddRow(new string[] {
                            "4"});
                table56.AddRow(new string[] {
                            "5"});
                table56.AddRow(new string[] {
                            "7"});
                table56.AddRow(new string[] {
                            "9"});
                table56.AddRow(new string[] {
                            "999"});
                table56.AddRow(new string[] {
                            "10"});
                table56.AddRow(new string[] {
                            "58"});
                table56.AddRow(new string[] {
                            "1"});
                table56.AddRow(new string[] {
                            "999"});
                table56.AddRow(new string[] {
                            "998"});
#line 526
 testRunner.And("the second number", ((string)(null)), table56, "And ");
#line hidden
#line 541
 testRunner.When("both numbers are multiplied", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table57 = new TechTalk.SpecFlow.Table(new string[] {
                            "Result"});
                table57.AddRow(new string[] {
                            "0"});
                table57.AddRow(new string[] {
                            "2"});
                table57.AddRow(new string[] {
                            "2"});
                table57.AddRow(new string[] {
                            "12"});
                table57.AddRow(new string[] {
                            "30"});
                table57.AddRow(new string[] {
                            "56"});
                table57.AddRow(new string[] {
                            "9"});
                table57.AddRow(new string[] {
                            "999"});
                table57.AddRow(new string[] {
                            "990"});
                table57.AddRow(new string[] {
                            "1972"});
                table57.AddRow(new string[] {
                            "99"});
                table57.AddRow(new string[] {
                            "998,001"});
                table57.AddRow(new string[] {
                            "996004"});
#line 542
 testRunner.Then("the answer should be the following", ((string)(null)), table57, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Multiplying 2 negative integers")]
        [NUnit.Framework.CategoryAttribute("multiply-api")]
        public virtual void Multiplying2NegativeIntegers()
        {
            string[] tagsOfScenario = new string[] {
                    "multiply-api"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Multiplying 2 negative integers", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 560
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table58 = new TechTalk.SpecFlow.Table(new string[] {
                            "Number1"});
                table58.AddRow(new string[] {
                            "-99"});
                table58.AddRow(new string[] {
                            "-1"});
                table58.AddRow(new string[] {
                            "-3"});
                table58.AddRow(new string[] {
                            "-5"});
                table58.AddRow(new string[] {
                            "-7"});
                table58.AddRow(new string[] {
                            "-9"});
                table58.AddRow(new string[] {
                            "-34"});
                table58.AddRow(new string[] {
                            "-99"});
                table58.AddRow(new string[] {
                            "-999"});
#line 561
 testRunner.Given("I have the first number", ((string)(null)), table58, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table59 = new TechTalk.SpecFlow.Table(new string[] {
                            "Number2"});
                table59.AddRow(new string[] {
                            "-99"});
                table59.AddRow(new string[] {
                            "-2"});
                table59.AddRow(new string[] {
                            "-4"});
                table59.AddRow(new string[] {
                            "-6"});
                table59.AddRow(new string[] {
                            "-8"});
                table59.AddRow(new string[] {
                            "-1"});
                table59.AddRow(new string[] {
                            "-58"});
                table59.AddRow(new string[] {
                            "-1"});
                table59.AddRow(new string[] {
                            "-999"});
#line 572
 testRunner.And("the second number", ((string)(null)), table59, "And ");
#line hidden
#line 583
 testRunner.When("both numbers are multiplied", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table60 = new TechTalk.SpecFlow.Table(new string[] {
                            "Result"});
                table60.AddRow(new string[] {
                            "9801"});
                table60.AddRow(new string[] {
                            "2"});
                table60.AddRow(new string[] {
                            "12"});
                table60.AddRow(new string[] {
                            "30"});
                table60.AddRow(new string[] {
                            "56"});
                table60.AddRow(new string[] {
                            "9"});
                table60.AddRow(new string[] {
                            "1972"});
                table60.AddRow(new string[] {
                            "99"});
                table60.AddRow(new string[] {
                            "998001"});
#line 584
 testRunner.Then("the answer should be the following", ((string)(null)), table60, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Multiplying 1 positive and 1 negative integer")]
        [NUnit.Framework.CategoryAttribute("multiply-api")]
        public virtual void Multiplying1PositiveAnd1NegativeInteger()
        {
            string[] tagsOfScenario = new string[] {
                    "multiply-api"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Multiplying 1 positive and 1 negative integer", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 598
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table61 = new TechTalk.SpecFlow.Table(new string[] {
                            "Number1"});
                table61.AddRow(new string[] {
                            "1"});
                table61.AddRow(new string[] {
                            "-3"});
                table61.AddRow(new string[] {
                            "5"});
                table61.AddRow(new string[] {
                            "-7"});
                table61.AddRow(new string[] {
                            "9"});
                table61.AddRow(new string[] {
                            "-34"});
                table61.AddRow(new string[] {
                            "99"});
                table61.AddRow(new string[] {
                            "-1"});
                table61.AddRow(new string[] {
                            "-999"});
#line 599
 testRunner.Given("I have the first number", ((string)(null)), table61, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table62 = new TechTalk.SpecFlow.Table(new string[] {
                            "Number2"});
                table62.AddRow(new string[] {
                            "-2"});
                table62.AddRow(new string[] {
                            "4"});
                table62.AddRow(new string[] {
                            "-6"});
                table62.AddRow(new string[] {
                            "8"});
                table62.AddRow(new string[] {
                            "-1"});
                table62.AddRow(new string[] {
                            "58"});
                table62.AddRow(new string[] {
                            "-1"});
                table62.AddRow(new string[] {
                            "999"});
                table62.AddRow(new string[] {
                            "999"});
#line 611
 testRunner.And("the second number", ((string)(null)), table62, "And ");
#line hidden
#line 623
 testRunner.When("both numbers are multiplied", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table63 = new TechTalk.SpecFlow.Table(new string[] {
                            "Result"});
                table63.AddRow(new string[] {
                            "-2"});
                table63.AddRow(new string[] {
                            "-12"});
                table63.AddRow(new string[] {
                            "-30"});
                table63.AddRow(new string[] {
                            "-56"});
                table63.AddRow(new string[] {
                            "-9"});
                table63.AddRow(new string[] {
                            "-1972"});
                table63.AddRow(new string[] {
                            "-99"});
                table63.AddRow(new string[] {
                            "-999"});
                table63.AddRow(new string[] {
                            "-998001"});
#line 624
 testRunner.Then("the answer should be the following", ((string)(null)), table63, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Multiplying 0 and an integer")]
        [NUnit.Framework.CategoryAttribute("multiply-api")]
        public virtual void Multiplying0AndAnInteger()
        {
            string[] tagsOfScenario = new string[] {
                    "multiply-api"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Multiplying 0 and an integer", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 637
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table64 = new TechTalk.SpecFlow.Table(new string[] {
                            "Number1"});
                table64.AddRow(new string[] {
                            "-1"});
                table64.AddRow(new string[] {
                            "0"});
                table64.AddRow(new string[] {
                            "3"});
                table64.AddRow(new string[] {
                            "0"});
                table64.AddRow(new string[] {
                            "5"});
                table64.AddRow(new string[] {
                            "0"});
                table64.AddRow(new string[] {
                            "7"});
                table64.AddRow(new string[] {
                            "0"});
                table64.AddRow(new string[] {
                            "9"});
                table64.AddRow(new string[] {
                            "0"});
                table64.AddRow(new string[] {
                            "-999"});
                table64.AddRow(new string[] {
                            "0"});
#line 638
 testRunner.Given("I have the first number", ((string)(null)), table64, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table65 = new TechTalk.SpecFlow.Table(new string[] {
                            "Number2"});
                table65.AddRow(new string[] {
                            "0"});
                table65.AddRow(new string[] {
                            "2"});
                table65.AddRow(new string[] {
                            "0"});
                table65.AddRow(new string[] {
                            "-4"});
                table65.AddRow(new string[] {
                            "0"});
                table65.AddRow(new string[] {
                            "6"});
                table65.AddRow(new string[] {
                            "0"});
                table65.AddRow(new string[] {
                            "8"});
                table65.AddRow(new string[] {
                            "0"});
                table65.AddRow(new string[] {
                            "100"});
                table65.AddRow(new string[] {
                            "0"});
                table65.AddRow(new string[] {
                            "-0"});
#line 652
 testRunner.And("the second number", ((string)(null)), table65, "And ");
#line hidden
#line 666
 testRunner.When("both numbers are multiplied", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table66 = new TechTalk.SpecFlow.Table(new string[] {
                            "Result"});
                table66.AddRow(new string[] {
                            "0"});
                table66.AddRow(new string[] {
                            "0"});
                table66.AddRow(new string[] {
                            "0"});
                table66.AddRow(new string[] {
                            "0"});
                table66.AddRow(new string[] {
                            "0"});
                table66.AddRow(new string[] {
                            "0"});
                table66.AddRow(new string[] {
                            "0"});
                table66.AddRow(new string[] {
                            "0"});
                table66.AddRow(new string[] {
                            "0"});
                table66.AddRow(new string[] {
                            "0"});
                table66.AddRow(new string[] {
                            "0"});
                table66.AddRow(new string[] {
                            "0"});
#line 667
 testRunner.Then("the answer should be the following", ((string)(null)), table66, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Multiplying 2 positive decimals")]
        [NUnit.Framework.CategoryAttribute("multiply-api")]
        public virtual void Multiplying2PositiveDecimals()
        {
            string[] tagsOfScenario = new string[] {
                    "multiply-api"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Multiplying 2 positive decimals", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 684
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table67 = new TechTalk.SpecFlow.Table(new string[] {
                            "Number1"});
                table67.AddRow(new string[] {
                            "1.52"});
#line 685
 testRunner.Given("I have the first number", ((string)(null)), table67, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table68 = new TechTalk.SpecFlow.Table(new string[] {
                            "Number2"});
                table68.AddRow(new string[] {
                            "3.67"});
#line 689
 testRunner.And("the second number", ((string)(null)), table68, "And ");
#line hidden
#line 693
 testRunner.When("both numbers are multiplied", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table69 = new TechTalk.SpecFlow.Table(new string[] {
                            "Result"});
                table69.AddRow(new string[] {
                            "5.5784"});
#line 694
 testRunner.Then("the answer should be the following", ((string)(null)), table69, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Multiplying 2 negative decimals")]
        [NUnit.Framework.CategoryAttribute("multiply-api")]
        public virtual void Multiplying2NegativeDecimals()
        {
            string[] tagsOfScenario = new string[] {
                    "multiply-api"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Multiplying 2 negative decimals", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 700
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table70 = new TechTalk.SpecFlow.Table(new string[] {
                            "Number1"});
                table70.AddRow(new string[] {
                            "-0.7"});
#line 701
 testRunner.Given("I have the first number", ((string)(null)), table70, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table71 = new TechTalk.SpecFlow.Table(new string[] {
                            "Number2"});
                table71.AddRow(new string[] {
                            "-2.8"});
#line 706
 testRunner.And("the second number", ((string)(null)), table71, "And ");
#line hidden
#line 710
 testRunner.When("both numbers are multiplied", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table72 = new TechTalk.SpecFlow.Table(new string[] {
                            "Result"});
                table72.AddRow(new string[] {
                            "1.96"});
#line 711
 testRunner.Then("the answer should be the following", ((string)(null)), table72, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Multiplying 1 postive and 1 negative decimal")]
        [NUnit.Framework.CategoryAttribute("multiply-api")]
        public virtual void Multiplying1PostiveAnd1NegativeDecimal()
        {
            string[] tagsOfScenario = new string[] {
                    "multiply-api"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Multiplying 1 postive and 1 negative decimal", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 716
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table73 = new TechTalk.SpecFlow.Table(new string[] {
                            "Number1"});
                table73.AddRow(new string[] {
                            "-9.5"});
#line 717
 testRunner.Given("I have the first number", ((string)(null)), table73, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table74 = new TechTalk.SpecFlow.Table(new string[] {
                            "Number2"});
                table74.AddRow(new string[] {
                            "3.2"});
#line 720
 testRunner.And("the second number", ((string)(null)), table74, "And ");
#line hidden
#line 723
 testRunner.When("both numbers are multiplied", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table75 = new TechTalk.SpecFlow.Table(new string[] {
                            "Result"});
                table75.AddRow(new string[] {
                            "-30.4"});
#line 724
 testRunner.Then("the answer should be the following", ((string)(null)), table75, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Multiplying 2 large integers")]
        [NUnit.Framework.CategoryAttribute("multiply-api")]
        public virtual void Multiplying2LargeIntegers()
        {
            string[] tagsOfScenario = new string[] {
                    "multiply-api"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Multiplying 2 large integers", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 730
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table76 = new TechTalk.SpecFlow.Table(new string[] {
                            "Number1"});
                table76.AddRow(new string[] {
                            "86436"});
#line 731
 testRunner.Given("I have the first number", ((string)(null)), table76, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table77 = new TechTalk.SpecFlow.Table(new string[] {
                            "Number2"});
                table77.AddRow(new string[] {
                            "7896"});
#line 735
 testRunner.And("the second number", ((string)(null)), table77, "And ");
#line hidden
#line 739
 testRunner.When("both numbers are multiplied", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table78 = new TechTalk.SpecFlow.Table(new string[] {
                            "Result"});
                table78.AddRow(new string[] {
                            "682498656"});
#line 740
 testRunner.Then("the answer should be the following", ((string)(null)), table78, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Multiplying 2 large integers ending in zero")]
        [NUnit.Framework.CategoryAttribute("multiply-api")]
        public virtual void Multiplying2LargeIntegersEndingInZero()
        {
            string[] tagsOfScenario = new string[] {
                    "multiply-api"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Multiplying 2 large integers ending in zero", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 745
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table79 = new TechTalk.SpecFlow.Table(new string[] {
                            "Number1"});
                table79.AddRow(new string[] {
                            "864360"});
#line 746
 testRunner.Given("I have the first number", ((string)(null)), table79, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table80 = new TechTalk.SpecFlow.Table(new string[] {
                            "Number2"});
                table80.AddRow(new string[] {
                            "78960"});
#line 750
 testRunner.And("the second number", ((string)(null)), table80, "And ");
#line hidden
#line 754
 testRunner.When("both numbers are multiplied", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table81 = new TechTalk.SpecFlow.Table(new string[] {
                            "Result"});
                table81.AddRow(new string[] {
                            "68249865600"});
#line 755
 testRunner.Then("the answer should be the following", ((string)(null)), table81, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Dividing 2 positive integers with no remainder")]
        [NUnit.Framework.CategoryAttribute("divide-api")]
        public virtual void Dividing2PositiveIntegersWithNoRemainder()
        {
            string[] tagsOfScenario = new string[] {
                    "divide-api"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Dividing 2 positive integers with no remainder", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 762
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table82 = new TechTalk.SpecFlow.Table(new string[] {
                            "Number1"});
                table82.AddRow(new string[] {
                            "4"});
                table82.AddRow(new string[] {
                            "9"});
                table82.AddRow(new string[] {
                            "10"});
                table82.AddRow(new string[] {
                            "100"});
                table82.AddRow(new string[] {
                            "99"});
                table82.AddRow(new string[] {
                            "8"});
                table82.AddRow(new string[] {
                            "999"});
#line 763
 testRunner.Given("I have the first number", ((string)(null)), table82, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table83 = new TechTalk.SpecFlow.Table(new string[] {
                            "Number2"});
                table83.AddRow(new string[] {
                            "2"});
                table83.AddRow(new string[] {
                            "3"});
                table83.AddRow(new string[] {
                            "5"});
                table83.AddRow(new string[] {
                            "20"});
                table83.AddRow(new string[] {
                            "11"});
                table83.AddRow(new string[] {
                            "8"});
                table83.AddRow(new string[] {
                            "999"});
#line 772
 testRunner.And("the second number", ((string)(null)), table83, "And ");
#line hidden
#line 781
 testRunner.When("both numbers are divided", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table84 = new TechTalk.SpecFlow.Table(new string[] {
                            "Result"});
                table84.AddRow(new string[] {
                            "2"});
                table84.AddRow(new string[] {
                            "3"});
                table84.AddRow(new string[] {
                            "2"});
                table84.AddRow(new string[] {
                            "5"});
                table84.AddRow(new string[] {
                            "9"});
                table84.AddRow(new string[] {
                            "1"});
                table84.AddRow(new string[] {
                            "1"});
#line 782
 testRunner.Then("the answer should be the following", ((string)(null)), table84, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Dividing 2 negative integers with no remainder")]
        [NUnit.Framework.CategoryAttribute("divide-api")]
        public virtual void Dividing2NegativeIntegersWithNoRemainder()
        {
            string[] tagsOfScenario = new string[] {
                    "divide-api"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Dividing 2 negative integers with no remainder", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 793
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table85 = new TechTalk.SpecFlow.Table(new string[] {
                            "Number1"});
                table85.AddRow(new string[] {
                            "-4"});
                table85.AddRow(new string[] {
                            "-9"});
                table85.AddRow(new string[] {
                            "-10"});
                table85.AddRow(new string[] {
                            "-100"});
                table85.AddRow(new string[] {
                            "-99"});
                table85.AddRow(new string[] {
                            "-8"});
                table85.AddRow(new string[] {
                            "-999"});
#line 794
 testRunner.Given("I have the first number", ((string)(null)), table85, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table86 = new TechTalk.SpecFlow.Table(new string[] {
                            "Number2"});
                table86.AddRow(new string[] {
                            "-2"});
                table86.AddRow(new string[] {
                            "-3"});
                table86.AddRow(new string[] {
                            "-5"});
                table86.AddRow(new string[] {
                            "-20"});
                table86.AddRow(new string[] {
                            "-11"});
                table86.AddRow(new string[] {
                            "-8"});
                table86.AddRow(new string[] {
                            "-999"});
#line 803
 testRunner.And("the second number", ((string)(null)), table86, "And ");
#line hidden
#line 812
 testRunner.When("both numbers are divided", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table87 = new TechTalk.SpecFlow.Table(new string[] {
                            "Result"});
                table87.AddRow(new string[] {
                            "2"});
                table87.AddRow(new string[] {
                            "3"});
                table87.AddRow(new string[] {
                            "2"});
                table87.AddRow(new string[] {
                            "5"});
                table87.AddRow(new string[] {
                            "9"});
                table87.AddRow(new string[] {
                            "1"});
                table87.AddRow(new string[] {
                            "1"});
#line 813
 testRunner.Then("the answer should be the following", ((string)(null)), table87, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Dividing 1 positive and negative integer with no remander")]
        [NUnit.Framework.CategoryAttribute("divide-api")]
        public virtual void Dividing1PositiveAndNegativeIntegerWithNoRemander()
        {
            string[] tagsOfScenario = new string[] {
                    "divide-api"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Dividing 1 positive and negative integer with no remander", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 824
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table88 = new TechTalk.SpecFlow.Table(new string[] {
                            "Number1"});
                table88.AddRow(new string[] {
                            "-4"});
                table88.AddRow(new string[] {
                            "9"});
                table88.AddRow(new string[] {
                            "-10"});
                table88.AddRow(new string[] {
                            "100"});
                table88.AddRow(new string[] {
                            "-99"});
                table88.AddRow(new string[] {
                            "8"});
                table88.AddRow(new string[] {
                            "-999"});
#line 825
 testRunner.Given("I have the first number", ((string)(null)), table88, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table89 = new TechTalk.SpecFlow.Table(new string[] {
                            "Number2"});
                table89.AddRow(new string[] {
                            "2"});
                table89.AddRow(new string[] {
                            "-3"});
                table89.AddRow(new string[] {
                            "5"});
                table89.AddRow(new string[] {
                            "-20"});
                table89.AddRow(new string[] {
                            "11"});
                table89.AddRow(new string[] {
                            "-8"});
                table89.AddRow(new string[] {
                            "999"});
#line 834
 testRunner.And("the second number", ((string)(null)), table89, "And ");
#line hidden
#line 843
 testRunner.When("both numbers are divided", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table90 = new TechTalk.SpecFlow.Table(new string[] {
                            "Result"});
                table90.AddRow(new string[] {
                            "-2"});
                table90.AddRow(new string[] {
                            "-3"});
                table90.AddRow(new string[] {
                            "-2"});
                table90.AddRow(new string[] {
                            "-5"});
                table90.AddRow(new string[] {
                            "-9"});
                table90.AddRow(new string[] {
                            "-1"});
                table90.AddRow(new string[] {
                            "-1"});
#line 844
 testRunner.Then("the answer should be the following", ((string)(null)), table90, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Dividing a dividend lesser than a divisor")]
        [NUnit.Framework.CategoryAttribute("divide-api")]
        public virtual void DividingADividendLesserThanADivisor()
        {
            string[] tagsOfScenario = new string[] {
                    "divide-api"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Dividing a dividend lesser than a divisor", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 855
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table91 = new TechTalk.SpecFlow.Table(new string[] {
                            "Number1"});
                table91.AddRow(new string[] {
                            "6"});
#line 856
 testRunner.Given("I have the first number", ((string)(null)), table91, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table92 = new TechTalk.SpecFlow.Table(new string[] {
                            "Number2"});
                table92.AddRow(new string[] {
                            "5"});
#line 860
 testRunner.And("the second number", ((string)(null)), table92, "And ");
#line hidden
#line 864
 testRunner.When("both numbers are divided", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table93 = new TechTalk.SpecFlow.Table(new string[] {
                            "Result"});
                table93.AddRow(new string[] {
                            "1.2"});
#line 865
 testRunner.Then("the answer should be the following", ((string)(null)), table93, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Dividing zero by an integer")]
        [NUnit.Framework.CategoryAttribute("divide-api")]
        public virtual void DividingZeroByAnInteger()
        {
            string[] tagsOfScenario = new string[] {
                    "divide-api"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Dividing zero by an integer", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 872
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table94 = new TechTalk.SpecFlow.Table(new string[] {
                            "Number1"});
                table94.AddRow(new string[] {
                            "0"});
                table94.AddRow(new string[] {
                            "0"});
#line 873
 testRunner.Given("I have the first number", ((string)(null)), table94, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table95 = new TechTalk.SpecFlow.Table(new string[] {
                            "Number2"});
                table95.AddRow(new string[] {
                            "1"});
                table95.AddRow(new string[] {
                            "-2"});
#line 878
 testRunner.And("the second number", ((string)(null)), table95, "And ");
#line hidden
#line 883
 testRunner.When("both numbers are divided", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table96 = new TechTalk.SpecFlow.Table(new string[] {
                            "Result"});
                table96.AddRow(new string[] {
                            "0"});
                table96.AddRow(new string[] {
                            "0"});
#line 884
 testRunner.Then("the answer should be the following", ((string)(null)), table96, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Divide integer by zero")]
        [NUnit.Framework.CategoryAttribute("divide-api")]
        public virtual void DivideIntegerByZero()
        {
            string[] tagsOfScenario = new string[] {
                    "divide-api"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Divide integer by zero", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 890
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table97 = new TechTalk.SpecFlow.Table(new string[] {
                            "Number1"});
                table97.AddRow(new string[] {
                            "1"});
#line 891
 testRunner.Given("I have the first number", ((string)(null)), table97, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table98 = new TechTalk.SpecFlow.Table(new string[] {
                            "Number2"});
                table98.AddRow(new string[] {
                            "0"});
#line 895
 testRunner.And("the second number", ((string)(null)), table98, "And ");
#line hidden
#line 899
 testRunner.When("both numbers are divided", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table99 = new TechTalk.SpecFlow.Table(new string[] {
                            "Result"});
                table99.AddRow(new string[] {
                            "undefined"});
#line 900
 testRunner.Then("the answer should be the following", ((string)(null)), table99, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Dividing 2 positive decimals")]
        [NUnit.Framework.CategoryAttribute("divide-api")]
        public virtual void Dividing2PositiveDecimals()
        {
            string[] tagsOfScenario = new string[] {
                    "divide-api"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Dividing 2 positive decimals", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 906
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table100 = new TechTalk.SpecFlow.Table(new string[] {
                            "Number1"});
                table100.AddRow(new string[] {
                            "1.5"});
#line 907
 testRunner.Given("I have the first number", ((string)(null)), table100, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table101 = new TechTalk.SpecFlow.Table(new string[] {
                            "Number2"});
                table101.AddRow(new string[] {
                            "0.5"});
#line 911
 testRunner.And("the second number", ((string)(null)), table101, "And ");
#line hidden
#line 915
 testRunner.When("both numbers are divided", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table102 = new TechTalk.SpecFlow.Table(new string[] {
                            "Result"});
                table102.AddRow(new string[] {
                            "3"});
#line 916
 testRunner.Then("the answer should be the following", ((string)(null)), table102, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Dividing 2 negative decimals")]
        [NUnit.Framework.CategoryAttribute("divide-api")]
        public virtual void Dividing2NegativeDecimals()
        {
            string[] tagsOfScenario = new string[] {
                    "divide-api"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Dividing 2 negative decimals", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 921
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table103 = new TechTalk.SpecFlow.Table(new string[] {
                            "Number1"});
                table103.AddRow(new string[] {
                            "-1.5"});
#line 922
 testRunner.Given("I have the first number", ((string)(null)), table103, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table104 = new TechTalk.SpecFlow.Table(new string[] {
                            "Number2"});
                table104.AddRow(new string[] {
                            "-0.5"});
#line 926
 testRunner.And("the second number", ((string)(null)), table104, "And ");
#line hidden
#line 930
 testRunner.When("both numbers are divided", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table105 = new TechTalk.SpecFlow.Table(new string[] {
                            "Result"});
                table105.AddRow(new string[] {
                            "3"});
#line 931
 testRunner.Then("the answer should be the following", ((string)(null)), table105, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Dividing 1 positive and negative decimal")]
        [NUnit.Framework.CategoryAttribute("divide-api")]
        public virtual void Dividing1PositiveAndNegativeDecimal()
        {
            string[] tagsOfScenario = new string[] {
                    "divide-api"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Dividing 1 positive and negative decimal", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 936
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table106 = new TechTalk.SpecFlow.Table(new string[] {
                            "Number1"});
                table106.AddRow(new string[] {
                            "-1.5"});
#line 937
 testRunner.Given("I have the first number", ((string)(null)), table106, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table107 = new TechTalk.SpecFlow.Table(new string[] {
                            "Number2"});
                table107.AddRow(new string[] {
                            "0.5"});
#line 941
 testRunner.And("the second number", ((string)(null)), table107, "And ");
#line hidden
#line 945
 testRunner.When("both numbers are divided", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table108 = new TechTalk.SpecFlow.Table(new string[] {
                            "Result"});
                table108.AddRow(new string[] {
                            "-3"});
#line 946
 testRunner.Then("the answer should be the following", ((string)(null)), table108, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Dividing 2 large integers")]
        [NUnit.Framework.CategoryAttribute("divide-api")]
        public virtual void Dividing2LargeIntegers()
        {
            string[] tagsOfScenario = new string[] {
                    "divide-api"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Dividing 2 large integers", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 951
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table109 = new TechTalk.SpecFlow.Table(new string[] {
                            "Number1"});
                table109.AddRow(new string[] {
                            "440664384"});
#line 952
 testRunner.Given("I have the first number", ((string)(null)), table109, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table110 = new TechTalk.SpecFlow.Table(new string[] {
                            "Number2"});
                table110.AddRow(new string[] {
                            "35664"});
#line 956
 testRunner.And("the second number", ((string)(null)), table110, "And ");
#line hidden
#line 960
 testRunner.When("both numbers are divided", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table111 = new TechTalk.SpecFlow.Table(new string[] {
                            "Result"});
                table111.AddRow(new string[] {
                            "12356"});
#line 961
 testRunner.Then("the answer should be the following", ((string)(null)), table111, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Dividing 2 large integers ending with zero")]
        [NUnit.Framework.CategoryAttribute("divide-api")]
        public virtual void Dividing2LargeIntegersEndingWithZero()
        {
            string[] tagsOfScenario = new string[] {
                    "divide-api"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Dividing 2 large integers ending with zero", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 966
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table112 = new TechTalk.SpecFlow.Table(new string[] {
                            "Number1"});
                table112.AddRow(new string[] {
                            "68249865600"});
#line 967
 testRunner.Given("I have the first number", ((string)(null)), table112, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table113 = new TechTalk.SpecFlow.Table(new string[] {
                            "Number2"});
                table113.AddRow(new string[] {
                            "864360"});
#line 971
 testRunner.And("the second number", ((string)(null)), table113, "And ");
#line hidden
#line 975
 testRunner.When("both numbers are divided", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table114 = new TechTalk.SpecFlow.Table(new string[] {
                            "Result"});
                table114.AddRow(new string[] {
                            "78960"});
#line 976
 testRunner.Then("the answer should be the following", ((string)(null)), table114, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
