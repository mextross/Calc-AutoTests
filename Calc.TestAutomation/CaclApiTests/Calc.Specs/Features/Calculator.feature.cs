// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.7.0.0
//      SpecFlow Generator Version:3.7.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Calc.Specs.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.7.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Calculator")]
    public partial class CalculatorFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "Calculator.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Calculator", @"![Calculator](https://specflow.org/wp-content/uploads/2020/09/calculator.png)
Simple calculator for adding **two** numbers

Link to a feature: [Calculator](Calc.Specs/Features/Calculator.feature)
***Further read***: **[Learn more about how to generate Living Documentation](https://docs.specflow.org/projects/specflow-livingdoc/en/latest/LivingDocGenerator/Generating-Documentation.html)**", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Adding 2 positive numbers")]
        [NUnit.Framework.CategoryAttribute("add-api")]
        public virtual void Adding2PositiveNumbers()
        {
            string[] tagsOfScenario = new string[] {
                    "add-api"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Adding 2 positive numbers", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 10
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Number1"});
                table1.AddRow(new string[] {
                            "1"});
                table1.AddRow(new string[] {
                            "3"});
                table1.AddRow(new string[] {
                            "5"});
                table1.AddRow(new string[] {
                            "7"});
                table1.AddRow(new string[] {
                            "1"});
                table1.AddRow(new string[] {
                            "34"});
                table1.AddRow(new string[] {
                            "99"});
                table1.AddRow(new string[] {
                            "1"});
                table1.AddRow(new string[] {
                            "999"});
                table1.AddRow(new string[] {
                            "0"});
                table1.AddRow(new string[] {
                            "0"});
#line 11
 testRunner.Given("I have the first number", ((string)(null)), table1, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Number2"});
                table2.AddRow(new string[] {
                            "2"});
                table2.AddRow(new string[] {
                            "4"});
                table2.AddRow(new string[] {
                            "6"});
                table2.AddRow(new string[] {
                            "8"});
                table2.AddRow(new string[] {
                            "9"});
                table2.AddRow(new string[] {
                            "58"});
                table2.AddRow(new string[] {
                            "1"});
                table2.AddRow(new string[] {
                            "999"});
                table2.AddRow(new string[] {
                            "999"});
                table2.AddRow(new string[] {
                            "1"});
                table2.AddRow(new string[] {
                            "0"});
#line 24
 testRunner.And("the second number", ((string)(null)), table2, "And ");
#line hidden
#line 37
 testRunner.When("both numbers are added", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Result"});
                table3.AddRow(new string[] {
                            "3"});
                table3.AddRow(new string[] {
                            "7"});
                table3.AddRow(new string[] {
                            "11"});
                table3.AddRow(new string[] {
                            "15"});
                table3.AddRow(new string[] {
                            "10"});
                table3.AddRow(new string[] {
                            "92"});
                table3.AddRow(new string[] {
                            "100"});
                table3.AddRow(new string[] {
                            "1000"});
                table3.AddRow(new string[] {
                            "1998"});
                table3.AddRow(new string[] {
                            "1"});
                table3.AddRow(new string[] {
                            "0"});
#line 38
 testRunner.Then("the answer should be the following", ((string)(null)), table3, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Adding 2 negative numbers")]
        [NUnit.Framework.CategoryAttribute("add-api")]
        public virtual void Adding2NegativeNumbers()
        {
            string[] tagsOfScenario = new string[] {
                    "add-api"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Adding 2 negative numbers", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 54
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Number1"});
                table4.AddRow(new string[] {
                            "-1"});
                table4.AddRow(new string[] {
                            "-3"});
                table4.AddRow(new string[] {
                            "-5"});
                table4.AddRow(new string[] {
                            "-7"});
                table4.AddRow(new string[] {
                            "-1"});
                table4.AddRow(new string[] {
                            "-34"});
                table4.AddRow(new string[] {
                            "-99"});
                table4.AddRow(new string[] {
                            "-1"});
                table4.AddRow(new string[] {
                            "-999"});
                table4.AddRow(new string[] {
                            "-0"});
                table4.AddRow(new string[] {
                            "-0"});
#line 55
 testRunner.Given("I have the first number", ((string)(null)), table4, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Number2"});
                table5.AddRow(new string[] {
                            "-2"});
                table5.AddRow(new string[] {
                            "-4"});
                table5.AddRow(new string[] {
                            "-6"});
                table5.AddRow(new string[] {
                            "-8"});
                table5.AddRow(new string[] {
                            "-9"});
                table5.AddRow(new string[] {
                            "-58"});
                table5.AddRow(new string[] {
                            "-1"});
                table5.AddRow(new string[] {
                            "-999"});
                table5.AddRow(new string[] {
                            "-999"});
                table5.AddRow(new string[] {
                            "-1"});
                table5.AddRow(new string[] {
                            "-0"});
#line 68
 testRunner.And("the second number", ((string)(null)), table5, "And ");
#line hidden
#line 81
 testRunner.When("both numbers are added", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "Result"});
                table6.AddRow(new string[] {
                            "-3"});
                table6.AddRow(new string[] {
                            "-7"});
                table6.AddRow(new string[] {
                            "-11"});
                table6.AddRow(new string[] {
                            "-15"});
                table6.AddRow(new string[] {
                            "-10"});
                table6.AddRow(new string[] {
                            "-92"});
                table6.AddRow(new string[] {
                            "-100"});
                table6.AddRow(new string[] {
                            "-1000"});
                table6.AddRow(new string[] {
                            "-1998"});
                table6.AddRow(new string[] {
                            "-1"});
                table6.AddRow(new string[] {
                            "0"});
#line 82
 testRunner.Then("the answer should be the following", ((string)(null)), table6, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Adding 1 positive and 1 negative number")]
        [NUnit.Framework.CategoryAttribute("add-api")]
        public virtual void Adding1PositiveAnd1NegativeNumber()
        {
            string[] tagsOfScenario = new string[] {
                    "add-api"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Adding 1 positive and 1 negative number", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 97
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "Number1"});
                table7.AddRow(new string[] {
                            "1"});
                table7.AddRow(new string[] {
                            "-3"});
                table7.AddRow(new string[] {
                            "5"});
                table7.AddRow(new string[] {
                            "-7"});
                table7.AddRow(new string[] {
                            "1"});
                table7.AddRow(new string[] {
                            "-34"});
                table7.AddRow(new string[] {
                            "99"});
                table7.AddRow(new string[] {
                            "-1"});
                table7.AddRow(new string[] {
                            "999"});
                table7.AddRow(new string[] {
                            "-0"});
                table7.AddRow(new string[] {
                            "0"});
#line 98
 testRunner.Given("I have the first number", ((string)(null)), table7, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "Number2"});
                table8.AddRow(new string[] {
                            "-2"});
                table8.AddRow(new string[] {
                            "4"});
                table8.AddRow(new string[] {
                            "-6"});
                table8.AddRow(new string[] {
                            "8"});
                table8.AddRow(new string[] {
                            "-9"});
                table8.AddRow(new string[] {
                            "58"});
                table8.AddRow(new string[] {
                            "-1"});
                table8.AddRow(new string[] {
                            "999"});
                table8.AddRow(new string[] {
                            "-999"});
                table8.AddRow(new string[] {
                            "1"});
                table8.AddRow(new string[] {
                            "-0"});
#line 111
 testRunner.And("the second number", ((string)(null)), table8, "And ");
#line hidden
#line 124
 testRunner.When("both numbers are added", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "Result"});
                table9.AddRow(new string[] {
                            "-1"});
                table9.AddRow(new string[] {
                            "1"});
                table9.AddRow(new string[] {
                            "-1"});
                table9.AddRow(new string[] {
                            "1"});
                table9.AddRow(new string[] {
                            "-8"});
                table9.AddRow(new string[] {
                            "24"});
                table9.AddRow(new string[] {
                            "98"});
                table9.AddRow(new string[] {
                            "998"});
                table9.AddRow(new string[] {
                            "0"});
                table9.AddRow(new string[] {
                            "1"});
                table9.AddRow(new string[] {
                            "0"});
#line 125
 testRunner.Then("the answer should be the following", ((string)(null)), table9, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Adding 0 and a negative number")]
        [NUnit.Framework.CategoryAttribute("add-api")]
        public virtual void Adding0AndANegativeNumber()
        {
            string[] tagsOfScenario = new string[] {
                    "add-api"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Adding 0 and a negative number", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 140
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "Number1"});
                table10.AddRow(new string[] {
                            "1"});
                table10.AddRow(new string[] {
                            "0"});
                table10.AddRow(new string[] {
                            "3"});
                table10.AddRow(new string[] {
                            "0"});
                table10.AddRow(new string[] {
                            "5"});
                table10.AddRow(new string[] {
                            "0"});
                table10.AddRow(new string[] {
                            "7"});
                table10.AddRow(new string[] {
                            "0"});
                table10.AddRow(new string[] {
                            "9"});
                table10.AddRow(new string[] {
                            "0"});
                table10.AddRow(new string[] {
                            "999"});
#line 141
 testRunner.Given("I have the first number", ((string)(null)), table10, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "Number2"});
                table11.AddRow(new string[] {
                            "0"});
                table11.AddRow(new string[] {
                            "2"});
                table11.AddRow(new string[] {
                            "0"});
                table11.AddRow(new string[] {
                            "4"});
                table11.AddRow(new string[] {
                            "0"});
                table11.AddRow(new string[] {
                            "6"});
                table11.AddRow(new string[] {
                            "0"});
                table11.AddRow(new string[] {
                            "8"});
                table11.AddRow(new string[] {
                            "0"});
                table11.AddRow(new string[] {
                            "100"});
                table11.AddRow(new string[] {
                            "0"});
#line 154
 testRunner.And("the second number", ((string)(null)), table11, "And ");
#line hidden
#line 167
 testRunner.When("both numbers are added", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "Result"});
                table12.AddRow(new string[] {
                            "1"});
                table12.AddRow(new string[] {
                            "2"});
                table12.AddRow(new string[] {
                            "3"});
                table12.AddRow(new string[] {
                            "4"});
                table12.AddRow(new string[] {
                            "5"});
                table12.AddRow(new string[] {
                            "6"});
                table12.AddRow(new string[] {
                            "7"});
                table12.AddRow(new string[] {
                            "8"});
                table12.AddRow(new string[] {
                            "9"});
                table12.AddRow(new string[] {
                            "100"});
                table12.AddRow(new string[] {
                            "999"});
#line 168
 testRunner.Then("the answer should be the following", ((string)(null)), table12, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Subtracting 2 numbers")]
        [NUnit.Framework.CategoryAttribute("subtract")]
        public virtual void Subtracting2Numbers()
        {
            string[] tagsOfScenario = new string[] {
                    "subtract"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Subtracting 2 numbers", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 186
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                            "Number1"});
                table13.AddRow(new string[] {
                            "1"});
                table13.AddRow(new string[] {
                            "-1"});
                table13.AddRow(new string[] {
                            "10000"});
                table13.AddRow(new string[] {
                            "0"});
#line 187
 testRunner.Given("I have the first number", ((string)(null)), table13, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                            "Number2"});
                table14.AddRow(new string[] {
                            "2"});
                table14.AddRow(new string[] {
                            "-2"});
                table14.AddRow(new string[] {
                            "999"});
                table14.AddRow(new string[] {
                            "1"});
#line 193
 testRunner.And("the second number", ((string)(null)), table14, "And ");
#line hidden
#line 199
 testRunner.When("both numbers are subtracted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                            "Result"});
                table15.AddRow(new string[] {
                            "-1"});
                table15.AddRow(new string[] {
                            "1"});
                table15.AddRow(new string[] {
                            "9001"});
                table15.AddRow(new string[] {
                            "-1"});
#line 200
 testRunner.Then("the answer should be the following", ((string)(null)), table15, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Multiplying 2 numbers")]
        [NUnit.Framework.CategoryAttribute("subtract")]
        public virtual void Multiplying2Numbers()
        {
            string[] tagsOfScenario = new string[] {
                    "subtract"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Multiplying 2 numbers", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 209
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                            "Number1"});
                table16.AddRow(new string[] {
                            "1"});
                table16.AddRow(new string[] {
                            "-1"});
#line 210
 testRunner.Given("I have the first number", ((string)(null)), table16, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                            "Number2"});
                table17.AddRow(new string[] {
                            "2"});
                table17.AddRow(new string[] {
                            "-2"});
#line 214
 testRunner.And("the second number", ((string)(null)), table17, "And ");
#line hidden
#line 218
 testRunner.When("both numbers are multiplied", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                            "Result"});
                table18.AddRow(new string[] {
                            "2"});
                table18.AddRow(new string[] {
                            "2"});
#line 219
 testRunner.Then("the answer should be the following", ((string)(null)), table18, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Dividing 2 numbers")]
        [NUnit.Framework.CategoryAttribute("subtract")]
        public virtual void Dividing2Numbers()
        {
            string[] tagsOfScenario = new string[] {
                    "subtract"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Dividing 2 numbers", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 226
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                            "Number1"});
                table19.AddRow(new string[] {
                            "2"});
                table19.AddRow(new string[] {
                            "-9"});
#line 227
 testRunner.Given("I have the first number", ((string)(null)), table19, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                            "Number2"});
                table20.AddRow(new string[] {
                            "2"});
                table20.AddRow(new string[] {
                            "-3"});
#line 231
 testRunner.And("the second number", ((string)(null)), table20, "And ");
#line hidden
#line 235
 testRunner.When("both numbers are divided", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                            "Result"});
                table21.AddRow(new string[] {
                            "1"});
                table21.AddRow(new string[] {
                            "3"});
#line 236
 testRunner.Then("the answer should be the following", ((string)(null)), table21, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
